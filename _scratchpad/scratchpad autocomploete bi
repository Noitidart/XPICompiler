var {Cc: classes, Ci: interfaces, Cu: utils} = Components;
var fu = Cu.import('resource://gre/modules/FileUtils.jsm').FileUtils;

var bi = gBrowser.contentDocument.querySelector('#browse input'); //browser input field
try {
    bi.removeEventListener('keyup',autocomplete,false);
} catch (ignore) {}

var history = gBrowser.contentDocument.querySelector('#xpis');
var sw = gBrowser.contentDocument.querySelector('#statusWrap');
//var lastGood = {parentPath:'', subDirs:[]};
var cacheSubDirsOfPath = {}; //path: [subdirs]
var cParent = undefined;
var lastVal = undefined;
var autocomplete = function(e) {
    var bi = e.target;
    var bival = bi.value;
    if (bival == lastVal) { return } //this avoids like when ctrl or shift or etc is pressed
    lastVal = bival;
    if (bival == '') {
        bival = '\\\\.';
        cParent = fu.File(bival);
    } else {
        for (var i=bival.length; i>=1; i--) {
            try {
                Cu.reportError('testing ' + bival.substring(0,i));
                cParent = fu.File(bival.substring(0,i));
                //if improper strings it catches and ignores
                if (cParent.exists())  {
                    break;
                }
            } catch (ignore) {}
            cParent = null;
        }
    }
    if (cParent) {
        sw.innerHTML = cParent.path;
        sw.innerHTML += '<br>' + new Date().toLocaleTimeString();
    } else {
        sw.innerHTML = 'DOES NOT EXIST';
        sw.innerHTML += '<br>' + new Date().toLocaleTimeString();
    }
    /*
    var lastChar = bival[bival.length-1];
    if (lastChar == '\\' || lastChar == ':') {
    
    } else {
        return;
    }
    */
    try {
    	var dir = fu.File(bival);
    } catch (ex) {
        Cu.reportError('failed string path')
        history.innerHTML = 'Failed string path, so show directories from parent directory';
        //history.innerHTML += 'parent dir of last good = ' + lastGoodSubDirsParent;
        //history.innerHTML += lastGoodSubDirs.join('<br>');
        return;
    }
	//recursviely add all contents of dir
	var dirArr = []; //contains the sub dirs at path
	   try {
		var dirEntries = dir.directoryEntries;
	} catch (ex) {
        Cu.reportError('suspecting dir doesnt exist');
        history.innerHTML = 'Directory does not exist, so show directories from parent directory';
        //history.innerHTML += 'parent dir of last good = ' + lastGoodSubDirsParent;
        //history.innerHTML += lastGoodSubDirs.join('<br>');
        return;
	}
		while (dirEntries.hasMoreElements()) {
			var entry = dirEntries.getNext().QueryInterface(Ci.nsIFile);
			var readable = false;
			try {
			 readable = entry.isReadable();
			} catch (ignore) {}
			if (readable) {
    			try {
        			if (entry.isDirectory()) {
        			     try {
            			     var isReallyReadable = entry.directoryEntries;
            			     //if its not reallyreadable it will throw error and not get to line below
            			     dirArr.push(entry.leafName);
            			 } catch (ex) {
            			     //the .isReadable thing doesnt work. like "Documents and Settings" in "C:\" cannot be opened. so if we see that .directoryEntries throws exception, then its not openable. the exception thrown is "[Exception... "Component returned failure code: 0x80520015 (NS_ERROR_FILE_ACCESS_DENIED) [nsIFile.directoryEntries]"  nsresult: "0x80520015 (NS_ERROR_FILE_ACCESS_DENIED)" //event an empty folder has directoryEntries property
            			     Cu.reportError(entry.leafName + ' is not really readable!');
            			 }
        				//dirArr.push(entry.leafName + 'ISDIR: ' + entry.isDirectory() + ' .directoryEntries:' + entry.directoryEntries);
        				//cDump(entry,entry.leafName,true);
        			} else {
        			 Cu.reportError(entry.leafName + ' NOT DIR');
        			}
    			} catch (ex) {
    			 //Cu.reportError('something went wrong in entry.isDir');
    			 dirArr.push(entry.leafName + ' SOMETHIGN WORNG');
    			 Cu.reportError(entry.leafName + ' SOMETHIGN WORNG');
    			}
			} else {
			 Cu.reportError(entry.leafName + ' UNREADABLE');
			}
		}
		//lastGoodSubDirs = dirArr.slice(0);
		//lastGoodSubDirsParent = dir.path;
		cacheSubDirsOfPath[dir.path] = dirArr.slice(0);
	history.innerHTML = dirArr.join('<br>');
}

bi.addEventListener('keyup', autocomplete, false);

function cDump(obj, title, deep) {
    var tstr = '';
    var bstr = '';
    var fstr = '';
    for (var b in obj) {
        try{
            bstr += b+'='+obj[b]+'\n';
            if (deep) {
                bstr += '<div style="margin-left:35px;color:gray;cursor:pointer;border:1px solid blue;" onclick="this.childNodes[1].style.display=this.childNodes[1].style.display==\'block\'?\'none\':\'block\';this.scrollIntoView(true);">click to toggle<div style="display:none;">';
                for (var c in obj[b]) {
                    try {
                        bstr += '\t\t\t' + c+'='+obj[b][c]+'\n';
                    } catch(e0) {
                        bstr += '\t\t\t' + c+'=e0=deep_fstr='+e0+'\n';
                    }
                }
                bstr += '</div></div>'
            }
        } catch (e) {
                fstr = b+'='+e+'\n';
        }
    }
    if (deep) {
        bstr = bstr.replace(/<div[^>]*?>click to toggle<div[^>]*?><\/div><\/div>/g,'');
    }
    tstr += '<b>BSTR::</b>\n' + bstr;
    tstr += '\n<b>FSTR::</b>\n' + fstr;
        
    var cWin = Services.wm.getMostRecentWindow('navigator:browser');
    
    var onloadFunc = function() {
        cWin.gBrowser.selectedTab = cWin.gBrowser.tabContainer.childNodes[cWin.gBrowser.tabContainer.childNodes.length-1];
        newTabBrowser.removeEventListener('load', onloadFunc, true);
        if (title) { newTabBrowser.contentDocument.title = title; }
        newTabBrowser.contentDocument.body.innerHTML = tstr.replace(/\n/g,'<br>')
    };
    
    var newTabBrowser = cWin.gBrowser.getBrowserForTab(cWin.gBrowser.addTab('about:blank'));
    newTabBrowser.addEventListener('load', onloadFunc, true);

}

